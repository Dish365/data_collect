# Generated by Django 5.2.4 on 2025-08-05 15:04

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="SyncQueue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "table_name",
                    models.CharField(
                        db_index=True,
                        help_text="Name of the table/model being synchronized",
                        max_length=255,
                    ),
                ),
                (
                    "record_id",
                    models.CharField(
                        db_index=True,
                        help_text="ID of the record being synchronized",
                        max_length=255,
                    ),
                ),
                (
                    "operation",
                    models.CharField(
                        choices=[
                            ("create", "Create"),
                            ("update", "Update"),
                            ("delete", "Delete"),
                            ("sync", "Sync"),
                        ],
                        db_index=True,
                        max_length=10,
                    ),
                ),
                (
                    "data",
                    models.JSONField(
                        blank=True,
                        help_text="JSON data for the sync operation",
                        null=True,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        db_index=True, default=django.utils.timezone.now
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "attempts",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of sync attempts"
                    ),
                ),
                (
                    "max_attempts",
                    models.PositiveIntegerField(
                        default=3, help_text="Maximum number of retry attempts"
                    ),
                ),
                (
                    "last_attempt",
                    models.DateTimeField(
                        blank=True,
                        help_text="Timestamp of last sync attempt",
                        null=True,
                    ),
                ),
                (
                    "next_retry",
                    models.DateTimeField(
                        blank=True, help_text="Scheduled time for next retry", null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("syncing", "Syncing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        db_index=True,
                        default="pending",
                        max_length=10,
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True,
                        help_text="Error message from failed sync attempts",
                        null=True,
                    ),
                ),
                (
                    "error_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of consecutive errors"
                    ),
                ),
                (
                    "priority",
                    models.IntegerField(
                        choices=[
                            (0, "Low"),
                            (5, "Normal"),
                            (10, "High"),
                            (15, "Urgent"),
                        ],
                        db_index=True,
                        default=5,
                        help_text="Priority level for sync processing",
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "sync_source",
                    models.CharField(
                        default="gui",
                        help_text="Source system that initiated the sync",
                        max_length=100,
                    ),
                ),
                (
                    "sync_target",
                    models.CharField(
                        default="django",
                        help_text="Target system for the sync",
                        max_length=100,
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sync_operations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Sync Queue Item",
                "verbose_name_plural": "Sync Queue Items",
                "db_table": "sync_queue",
                "ordering": ["-priority", "created_at"],
                "indexes": [
                    models.Index(
                        fields=["status", "priority", "created_at"],
                        name="sync_status_priority_idx",
                    ),
                    models.Index(
                        fields=["created_by", "status"], name="sync_user_status_idx"
                    ),
                    models.Index(
                        fields=["table_name", "status"], name="sync_table_status_idx"
                    ),
                    models.Index(
                        fields=["table_name", "record_id"], name="sync_table_record_idx"
                    ),
                    models.Index(fields=["next_retry"], name="sync_retry_schedule_idx"),
                    models.Index(fields=["last_attempt"], name="sync_last_attempt_idx"),
                    models.Index(fields=["created_at"], name="sync_created_at_idx"),
                    models.Index(
                        fields=["status", "attempts", "max_attempts"],
                        name="sync_retry_logic_idx",
                    ),
                    models.Index(
                        fields=["sync_source", "sync_target", "status"],
                        name="sync_source_target_idx",
                    ),
                ],
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(("attempts__gte", 0)),
                        name="sync_attempts_positive",
                    ),
                    models.CheckConstraint(
                        condition=models.Q(("max_attempts__gt", 0)),
                        name="sync_max_attempts_positive",
                    ),
                    models.CheckConstraint(
                        condition=models.Q(("priority__gte", 0)),
                        name="sync_priority_positive",
                    ),
                ],
            },
        ),
    ]
